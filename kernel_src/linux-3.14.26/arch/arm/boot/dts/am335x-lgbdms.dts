/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"

/ {
	model = "TI AM335x EVM";
	compatible = "ti,am335x-evm", "ti,am33xx";

	memory {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};

	regulators {
		compatible = "simple-bus";

		reg_3p3v: 3p3v {
			  compatible = "regulator-fixed";
			  regulator-name = "3P3V";
			  regulator-min-microvolt = <3300000>;
			  regulator-max-microvolt = <3300000>;
			  regulator-always-on;
		};
	};	

	am33xx_pinmux: pinmux@44e10800 {
		pinctrl-names = "default";
		pinctrl-0 = <&user_gpios &wifi_sw_ap_key &clkout2_pin>;

        user_gpios: user_gpios {
            pinctrl-single,pins = < 
                0xE0  (PIN_OUTPUT_PULLDOWN | MUX_MODE7)  /* lcd_vsync.gpio2_22 : WIFI_LED   */
                0x6C  (PIN_INPUT_PULLDOWN  | MUX_MODE7)  /* gpmc_a11.gpio1_27  : CPU_SUB1GHZ_GPIO */
                0x168 (PIN_OUTPUT_PULLUP   | MUX_MODE7)  /* uart0_ctsn.gpio1_8 : SUB1GHZ_RST */
 				0x40  (PIN_OUTPUT_PULLUP   | MUX_MODE7)  /* gpmc_a0.gpio1_16   : ZB_RESET  */
            >;
        };

		wifi_sw_ap_key: wifi_sw_ap_key {
			pinctrl-single,pins = <
                0xE4  (PIN_INPUT_PULLDOWN  | MUX_MODE7)  /* lcd_hsync.gpio2_23 : WIFI_SW_AP */
			>;
		};

        i2c0_pins: pinmux_i2c0_pins {
			pinctrl-single,pins = <
				0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
				0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
			>;
		};

		i2c1_pins: pinmux_i2c1_pins {
			pinctrl-single,pins = <
				0x158 (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_d1.i2c1_sda */
				0x15c (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_cs0.i2c1_scl */
			>;
		};

		uart0_pins: pinmux_uart0_pins {
			pinctrl-single,pins = <
				0x170 (PIN_INPUT_PULLUP    | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
				0x174 (PIN_OUTPUT          | MUX_MODE0)	/* uart0_txd.uart0_txd */
			>;
		};

		uart1_pins: pinmux_uart1_pins {
			pinctrl-single,pins = <
				0x1A4 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* mcasp0_fsr.gpio3_19 : RTS */
				0x180 (PIN_INPUT_PULLUP    | MUX_MODE0)	/* uart1_rxd.uart1_rxd */
				0x184 (PIN_OUTPUT          | MUX_MODE0) /* uart1_txd.uart1_txd */
			>;
		};
		uart2_pins: pinmux_uart2_pins {
			pinctrl-single,pins = <
				0x19C (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* mcasp0_ahclkr.gpio3_17 : RTS */
				0x150 (PIN_INPUT_PULLUP    | MUX_MODE1)	/* spi0_sclk.uart2_rxd */
				0x154 (PIN_OUTPUT          | MUX_MODE1) /* spi0_d0.uart2_txd */
			>;
		};

		uart3_pins: pinmux_uart3_pins {
			pinctrl-single,pins = <
				0x160 (PIN_INPUT_PULLUP    | MUX_MODE1)	/* spi0_cs1.uart3_rxd */
				0x164 (PIN_OUTPUT          | MUX_MODE1) /* ecap0_in_pwm0_out.uart3_txd */
			>;
		};

		uart4_pins: pinmux_uart4_pins {
			pinctrl-single,pins = <
				0x64  (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_a9.gpio1_25 : RTS */
				0x11C (PIN_INPUT_PULLUP    | MUX_MODE3)	/* mii1_txd3.uart4_rxd */
				0x120 (PIN_OUTPUT          | MUX_MODE3) /* mii1_txd2.uart4_txd */
			>;
		};

		uart5_pins: pinmux_uart5_pins {
			pinctrl-single,pins = <
				0x108 (PIN_INPUT_PULLUP    | MUX_MODE3)	/* mii1_col.uart5_rxd */
				0x118 (PIN_OUTPUT          | MUX_MODE3) /* mii1_rx_dv.uart5_txd */
			>;
		};

		clkout2_pin: pinmux_clkout2_pin {
			pinctrl-single,pins = <
				0x1b4 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* xdma_event_intr1.clkout2 */
			>;
		};

		nandflash_pins_s0: nandflash_pins_s0 {
			pinctrl-single,pins = <
				0x0 (PIN_INPUT_PULLUP  | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
				0x4 (PIN_INPUT_PULLUP  | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
				0x8 (PIN_INPUT_PULLUP  | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
				0xc (PIN_INPUT_PULLUP  | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
				0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
				0x74 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpio0_30 */
				0x7c (PIN_OUTPUT       | MUX_MODE0)	/* gpmc_csn0.gpmc_csn0  */
				0x90 (PIN_OUTPUT       | MUX_MODE0)	/* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PIN_OUTPUT       | MUX_MODE0)	/* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PIN_OUTPUT       | MUX_MODE0)	/* gpmc_wen.gpmc_wen */
				0x9c (PIN_OUTPUT       | MUX_MODE0)	/* gpmc_be0n_cle.gpmc_be0n_cle */
			>;
		};

		cpsw_default: cpsw_default {
			pinctrl-single,pins = < 
				/* Slave 1 */
				0x10c (PIN_INPUT_PULLDOWN  | MUX_MODE1) /* mii1_crs.rmii1_crs */
				0x110 (PIN_INPUT_PULLUP    | MUX_MODE1) /* mii1_rxerr.rmii1_rxerr */
				0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* mii1_txen.rmii1_txen */
				0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* mii1_txd1.rmii1_txd1 */
				0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* mii1_txd0.rmii1_txd0 */
				0x13c (PIN_INPUT_PULLUP    | MUX_MODE1) /* mii1_rxd1.rmii1_rxd1 */
				0x140 (PIN_INPUT_PULLUP    | MUX_MODE1) /* mii1_rxd0.rmii1_rxd0 */
				0x144 (PIN_INPUT_PULLDOWN  | MUX_MODE0) /* rmii1_ref_clk.rmii_ref_clk */
				0x78  (PIN_OUTPUT_PULLUP   | MUX_MODE7) /* gpmc_ben1.gpio1_28 : RESET */
			>;
		};

		cpsw_sleep: cpsw_sleep {
			pinctrl-single,pins = < 
				/* Slave 1 reset value */
				0x10c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x144 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x78  (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		davinci_mdio_default: davinci_mdio_default {
			pinctrl-single,pins = <
				/* MDIO */
				0x148 (PIN_INPUT_PULLUP  | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
				0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			        /* mdio_clk.mdio_clk   */
			>;
		};

		davinci_mdio_sleep: davinci_mdio_sleep {
			pinctrl-single,pins = <
				/* MDIO reset value */
				0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		mmc1_pins_default: pinmux_mmc1_pins {
			pinctrl-single,pins = <
				0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat3.mmc0_dat3 */
				0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat2.mmc0_dat2 */
				0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat1.mmc0_dat1 */
				0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat0.mmc0_dat0 */
				0x100 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_clk.mmc0_clk */
				0x104 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_cmd.mmc0_cmd */
				0x190 (PIN_INPUT_PULLUP | MUX_MODE7) 	/* mcasp0_aclkx.gpio3_14 */
			>;
		};

		mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
			pinctrl-single,pins = <
				0x0F0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0F4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0F8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0FC (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x100 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x104 (PIN_INPUT_PULLUP   | MUX_MODE7)    /* mmc0_cmd.mmc0_cmd */
				0x190 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};
	};

	ocp {
		vbat: fixedregulator@0 {
			compatible = "regulator-fixed";
			regulator-name = "vbat";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			regulator-boot-on;
		};

		lis3_reg: fixedregulator@1 {
			compatible = "regulator-fixed";
			regulator-name = "lis3_reg";
			regulator-boot-on;
		};

		gpio_keys: volume_keys@0 {
			compatible = "gpio-keys";
			#address-cells = <1>;
			#size-cells = <0>;
			autorepeat;

			switch@0 {
				label = "wifi_softap-up";
				linux,code = <115>;
				gpios = <&gpio2 23 GPIO_ACTIVE_LOW>;
				gpio-key,wakeup;
			};
		};
	};
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;
	status = "okay";
	clock-frequency = <400000>;

	pcf8563: rtc@51 {
		compatible = "pcf8563";
		reg = <0x51>;
	};            
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;
	status = "okay";
	clock-frequency = <100000>;
};

&elm {
	status = "okay";
};

&epwmss0 {
	status = "okay";
};

&gpmc {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&nandflash_pins_s0>;
	ranges = <0 0 0x08000000 0x10000000>;	/* CS0: NAND */
	nand@0,0 {
			reg = <0 0 0>; /* CS0, offset 0 */
			nand-bus-width = <8>;
			gpmc,device-width = <1>;
			gpmc,sync-clk-ps = <0>;
			gpmc,cs-on-ns = <0>;
			gpmc,cs-rd-off-ns = <44>;
			gpmc,cs-wr-off-ns = <44>;
			gpmc,adv-on-ns = <6>;
			gpmc,adv-rd-off-ns = <34>;
			gpmc,adv-wr-off-ns = <44>;
			gpmc,we-on-ns = <0>;
			gpmc,we-off-ns = <40>;
			gpmc,oe-on-ns = <0>;
			gpmc,oe-off-ns = <54>;
			gpmc,access-ns = <64>;
			gpmc,rd-cycle-ns = <82>;
			gpmc,wr-cycle-ns = <82>;
			gpmc,wait-on-read = "true";
			gpmc,wait-on-write = "true";
			gpmc,bus-turnaround-ns = <0>;
			gpmc,cycle2cycle-delay-ns = <0>;
			gpmc,clk-activation-ns = <0>;
			gpmc,wait-monitoring-ns = <0>;
			gpmc,wr-access-ns = <40>;
			gpmc,wr-data-mux-bus-ns = <0>;
			ti,nand-ecc-opt= "bch8";
			ti,elm-id = <&elm>;
			/* MTD partition table */
			/* All SPL-* partitions are sized to minimal length
			 * which can be independently programmable. For
			 * NAND flash this is equal to size of erase-block */
			#address-cells = <1>;
			#size-cells = <1>;
			partition@0 {
				label = "NAND.SPL";
				reg = <0x00000000 0x000020000>;
			};
			partition@1 {
				label = "NAND.SPL.backup1";
			  	reg = <0x00020000 0x00020000>;
			};
			partition@2 {
			  	label = "NAND.SPL.backup2";
			  	reg = <0x00040000 0x00020000>;
			};
			partition@3 {
			 	label = "NAND.SPL.backup3";
			  	reg = <0x00060000 0x00020000>;
			};
			partition@4 {
			  	label = "NAND.u-boot-spl-os";
			  	reg = <0x00080000 0x00040000>;
			};
			partition@5 {
			  	label = "NAND.u-boot";
			  	reg = <0x000C0000 0x00100000>;
			};
			partition@6 {
			  	label = "NAND.u-boot-env";
			  	reg = <0x001C0000 0x00020000>;
			};
			partition@7 {
			  	label = "NAND.u-boot-env.backup1";
			  	reg = <0x001E0000 0x00020000>;
			};
			partition@8 {
			  	label = "NAND.kernel";
			  	reg = <0x00200000 0x00800000>;
			};
			partition@9 {
			  	label = "NAND.file-system";
			  	reg = <0x00A00000 0x01000000>;
			};
			partition@010 {
			 	label = "NAND.application";
			 	reg = <0x01A00000 0x0E600000>;
			};
	};
};

&mac {
	slaves = <1>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <0>;
	phy-mode = "rmii";
};

&phy_sel {
    rmii-clock-ext;
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&reg_3p3v>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc1_pins_default>;
	pinctrl-1 = <&mmc1_pins_sleep>;
	cd-gpios = <&gpio3 14 GPIO_ACTIVE_HIGH>;
	cd-inverted;
};

&usb {
    status = "okay";

    control@44e10620 {
        status = "okay";
    };  

    usb-phy@47401300 {
        status = "okay";
    };  

    usb-phy@47401b00 {
        status = "okay";
    };  

    usb@47401000 {
        status = "okay";
        dr_mode = "host";
    };  

    usb@47401800 {
        status = "okay";
        dr_mode = "host";
    };  

    dma-controller@47402000  {
        status = "okay";
    };  
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
	status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;
	status = "okay";
    rts-gpio = <&gpio3 19 GPIO_ACTIVE_HIGH>;
    rs485-rts-active-high;
    rs485-rts-delay = <1 1>;
    linux,rs485-enabled-at-boot-time;
};

&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart2_pins>;
	status = "okay";
    rts-gpio = <&gpio3 17 GPIO_ACTIVE_HIGH>;
    rs485-rts-active-high;
    rs485-rts-delay = <1 1>;
    linux,rs485-enabled-at-boot-time;
};

&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart3_pins>;
	status = "okay";
};

&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart4_pins>;
	status = "okay";
    rts-gpio = <&gpio1 25 GPIO_ACTIVE_HIGH>;
    rs485-rts-active-high;
    rs485-rts-delay = <1 1>;
    linux,rs485-enabled-at-boot-time;
};

&uart5 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart5_pins>;
	status = "okay";
};

&tscadc {
	status = "okay";
	adc {
		ti,adc-channels = <0 1 4 6 7>;
	};
};

&wkup_m3 {
	ti,scale-data-fw = "am335x-evm-scale-data.bin";
};

&edma {
	ti,edma-xbar-event-map = <1 12 
		                      2 13>;
};

