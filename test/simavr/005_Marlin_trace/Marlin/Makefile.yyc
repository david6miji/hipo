## 사용자 소스
TARGET			= fw_Marlin

CROSS_PREFIX	= avr-
MCU_TARGET     = atmega2560

OUT_DIR				= ./out/

C_SRCS			= 
C_SRCS			+= /usr/share/arduino/hardware/arduino/cores/arduino/wiring.c 
C_SRCS			+= simavr_info.c


C_OBJS			= 
C_OBJS			+= $(OUT_DIR)wiring.o 
C_OBJS			+= $(OUT_DIR)simavr_info.o

CPP_SRCS		= 
CPP_SRCS		+= Marlin_main.cpp

CPP_OBJS		= 
CPP_OBJS		+= $(OUT_DIR)Marlin_main.o

LIBS		    = 

LIB_DIRS		= 

INCLUDE_DIRS	= 
INCLUDE_DIRS	+= -I. 
INCLUDE_DIRS	+= -I/usr/local/include/simavr/avr/
INCLUDE_DIRS	+= -I/usr/share/arduino/hardware/arduino/cores/arduino 
INCLUDE_DIRS	+= -I/usr/share/arduino/libraries/LiquidCrystal 
INCLUDE_DIRS	+= -I/usr/share/arduino/libraries/SPI 
INCLUDE_DIRS	+= -I/usr/share/arduino/hardware/arduino/variants/mega 

#	-I applet 

CFLAGS			= 
# CFLAGS			+= -MMD 
CFLAGS			+= -Wall
CFLAGS			+= -gdwarf-2
CFLAGS			+= -Os
CFLAGS			+= --std=gnu99
CFLAGS			+= -fno-inline-small-functions
CFLAGS			+= -ffunction-sections -fdata-sections

CFLAGS			+= -mmcu=$(MCU_TARGET)
CFLAGS			+= -DF_CPU=16000000
CFLAGS			+= -DARDUINO=105 
CFLAGS			+= -DMOTHERBOARD=33 
			
LDFLAGS			= 
LDFLAGS			+= -Wl,--relax,--gc-sections
LDFLAGS			+= -Wl,--undefined=_mmcu,--section-start=.mmcu=0x910000

# 	-MMD 
# 	-gstabs 
# 	-Wstrict-prototypes 
# 	-fno-use-cxa-atexit 
# 	-funsigned-char 
# 	-funsigned-bitfields 
# 	-fpack-struct 
# 	-fshort-enums 
# 	-w 

CC				=	$(CROSS_PREFIX)gcc
CXX			 	=	$(CROSS_PREFIX)g++
AR				=	$(CROSS_PREFIX)ar rc
AR2				=	$(CROSS_PREFIX)ranlib
RANLIB			=	$(CROSS_PREFIX)ranlib
LD				=	$(CROSS_PREFIX)ld
NM				=	$(CROSS_PREFIX)nm
STRIP			=	$(CROSS_PREFIX)strip
OBJCOPY		 	=	$(CROSS_PREFIX)objcopy
OBJDUMP        	=	$(CROSS_PREFIX)objdump
CP				= 	cp -a
MV				= 	mv

.SUFFIXES : .c.o

all: make_out $(TARGET).axf lst text eeprom

make_out:
	mkdir -p $(OUT_DIR)
	
$(TARGET).axf : $(C_OBJS) $(CPP_OBJS)
#	$(CC) $(CFLAGS) $(INCLUDE_DIRS) $(LDFLAGS) $(LIB_DIRS) -o $@ $^ $(LIBS)
#	$(CP) $@ $(DIR_BIN)

	
$(C_OBJS):$(C_SRCS)
	@echo "Compiling $< ..."
	$(CC) -c $(CFLAGS) $(INCLUDE_DIRS) -o $@ $<
	
$(CPP_OBJS):$(CPP_SRCS)
	@echo "Compiling $< ..."
	$(CC) -c $(CFLAGS) $(INCLUDE_DIRS) -o $@ $<

lst:  $(TARGET).lst
	
%.lst: %.axf
	$(OBJDUMP) -h -S $< > $@

dep :
	$(CC) -M $(INCLUDE_DIRS) $(SRCS) > .depend
	
clean:
	rm -rf ./out
	rm -f *.bak
	rm -f *.map
	rm -f *.o
	rm -f *.d
	rm -f core	
	rm -f $(OBJS)
	rm -f $(TARGET).axf
	rm -f $(TARGET).lst
	rm -f $(TARGET).hex
	rm -f $(TARGET).bin
	rm -f $(TARGET).srec
	rm -f $(TARGET).elf
	rm -f $(TARGET)_eeprom.hex
	rm -f $(TARGET)_eeprom.bin
	rm -f $(TARGET)_eeprom.srec
	rm -f $(DIR_BIN)$(TARGET).axf
	rm -f $(DIR_BIN)$(TARGET).hex

distclean: clean
	rm -rf .depend	

ifeq (.depend,$(wildcard .depend))
include .depend
endif
	
text: hex bin srec
hex:  $(TARGET).hex
	$(CP) $< $(DIR_BIN)
	
bin:  $(TARGET).bin
srec: $(TARGET).srec
%.hex: %.axf
	$(OBJCOPY) -j .text -j .data -O ihex $< $@
%.srec: %.axf
	$(OBJCOPY) -j .text -j .data -O srec $< $@
%.bin: %.axf
	$(OBJCOPY) -j .text -j .data -O binary $< $@
# Rules for building the .eeprom rom images
eeprom: ehex ebin esrec
ehex:  $(TARGET)_eeprom.hex
ebin:  $(TARGET)_eeprom.bin
esrec: $(TARGET)_eeprom.srec
%_eeprom.hex: %.axf
	$(OBJCOPY) -j .eeprom --change-section-lma .eeprom=0 -O ihex $< $@ \
    || { echo empty $@ not generated; exit 0; }
%_eeprom.srec: %.axf
	$(OBJCOPY) -j .eeprom --change-section-lma .eeprom=0 -O srec $< $@ \
    || { echo empty $@ not generated; exit 0; }
%_eeprom.bin: %.axf
	$(OBJCOPY) -j .eeprom --change-section-lma .eeprom=0 -O binary $< $@ \
    || { echo empty $@ not generated; exit 0; }	
	
	